{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "# oe-app-route\nThe `oe-app-route` element can be used to auto configure, application level client side routing.\n\n```html\n        <app-location route=\"{{route}}\"></app-location>\n        <oe-app-route route=\"{{route}}\" config-url=\"/data/UIRoutes.json\">\n            <iron-pages route-target>\n            </iron-pages>\n        </oe-app-route>\n```\nOR\n```html\n        <app-location route=\"{{route}}\"></app-location>\n        <oe-app-route route=\"{{route}}\" config-url=\"/api/UIRoutes\">\n        </oe-app-route>\n        <iron-pages route-target>\n        </iron-pages>\n```\n\n### Route Configuration\n\nconfig-url should return array of routes, each route object can have following properties\n\nProperty |              Description      | Default\n---------|-------------------------------|----------\n`name`   | route name                    |\n`path`   | relative url along with placeholders e.g. /customer/:id |\n`type`   | refer section on [type and import Properties](#type-and-import-properties)        |\n`import` | refer section on [type and import Properties](#type-and-import-properties)              |\n\ne.g.\n\n    [{\n        \"type\": \"page\",\n        \"name\": \"receipts\",\n        \"path\": \"/receipts\",\n        \"import\": \"receipts-partial.html\"\n    },\n    {\n        \"type\": \"elem\",\n        \"name\": \"cfe-loan-details\",\n        \"path\": \"/loan\",\n        \"import\": \"../business/cfe-loan-details.js\"\n    }]\n\n#### *type* and *import* Properties\n\n> The *type* property can have following values:\n>\n> - **page** : When route type is specified as page, the html data from *import* is fetched and added as innerHtml of target element.\n>  - If the *path* argument has any placeholders (e.g. execute/:modelName/:action) or actual URL has any query-string then the actual values can be referred in the imported html partial directly.\n> ``` html\n> <h2>Performing {{action}} on {{modelName}}</h2>\n> ```\n> - **elem** type of route places element specified by *name* property on hhe target. *import* property points to the location of element definition file.\n>  - If element is not registered yet, *import* is href-imported and *name* element is added.\n>  - Placeholders and query parameters are set on the element using `this.set` call. (**id** in path or query-parameters is added as **modelId** attribute)\n> ``` html\n> <owesome-element action=\"...\" model-name=\"...\"></owesome-element>\n> ```\n>  - The element-name can be made dynamic by introducing **elmentName** as path parameter. e.g. /show/:elementName\n>  - **meta** : route types are not supported anymore.\n> Use `model-ui-generator` as a mediator element for replacing old `meta` type of routes.\n\n\n#### Sharing data between SPA routes,\n\n##### Through URL placeholders\n\nConsider two UI Routes having following URL patterns\n\n```\n{\n  path: '/view-orders',\n\ttype: 'elem',\n\tname:'order-list'\n}\n\n{\n  path: '/view-order/:orderId',\n\ttype: 'elem',\n\tname: 'order-details'\n}\n```\n**order-details** component has a property _orderId_.\n\n(a) Place an ```<a href=\"/view-order/123\">``` on order-list component (through a dom-repeat sort). When user clicks on this link SPA navigation will take user to <order-details> and orderId property will be set to \"123\" automatically.\n\n(b) Programatically call ```oe_navigate_to(\"/view-order/123\")``` and this will have same effect as above.\n\n##### Passing entire object data\nSometimes you may want to pass entire javascript object and passing it through URL may not be possible.\nConsider two UI Routes having following URL patterns\n\n```\n{\n  path: '/view-orders',\n\ttype: 'elem',\n\tname:'order-list'\n}\n\n{\n  path: '/view-order/:orderId',\n  type: 'elem',\n  name: 'order-details'\n}\n```\n\n**<order-details>** component has a property _order_ which should be set directly.\n\nProgramatically call ```oe_navigate_to(\"/view-order/123\", {order:my_order_object});```\n\nThis will navigate user to \"/view-order/123\", show **<order-details>** component and\nset order property to passed in my_oder_object.",
      "summary": "",
      "path": "oe-app-route.js",
      "properties": [
        {
          "name": "route",
          "type": "Object | null | undefined",
          "description": "Route object obtained from app-location containing\npath,query parameter etc.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 165,
              "column": 6
            },
            "end": {
              "line": 168,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "configUrl",
          "type": "string | null | undefined",
          "description": "Url from which the UIRoutes needs to be fetched ,\ndefaults to api call to UIRoutes model.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "noMatch",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 6
            },
            "end": {
              "line": 184,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "group",
          "type": "string | null | undefined",
          "description": "'group' query parameter for fetching UIRoutes",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 6
            },
            "end": {
              "line": 192,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "routesList",
          "type": "Array | null | undefined",
          "description": "List of routes fetched.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "tail",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 203,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "activeRoute",
          "type": "Object | null | undefined",
          "description": "Active route",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 6
            },
            "end": {
              "line": 215,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "activeGroup",
          "type": "string | null | undefined",
          "description": "Selected group name",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 6
            },
            "end": {
              "line": 225,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "fetchAllGroups",
          "type": "boolean | null | undefined",
          "description": "Ignore group property and fetch all Routes",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 6
            },
            "end": {
              "line": 233,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "_deepValue",
          "description": "Get the value from the 'obj' based on the 'path'.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "object to navigate"
            },
            {
              "name": "path",
              "type": "string",
              "description": "path for navigation"
            }
          ],
          "return": {
            "type": "Any",
            "desc": "value present in the given path of the obj."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "_deepSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "debounce",
          "description": "Call `debounce` to collapse multiple requests for a named task into\none invocation which is made after the wait time has elapsed with\nno new request.  If no wait time is given, the callback will be called\nat microtask timing (guaranteed before paint).\n\n    debouncedClickAction(e) {\n      // will not call `processClick` more than once per 100ms\n      this.debounce('click', function() {\n       this.processClick();\n      } 100);\n    }",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jobName",
              "type": "string",
              "description": "String to identify the debounce job."
            },
            {
              "name": "callback",
              "type": "function (): void",
              "description": "Function that is called (with `this`\n  context) when the wait time elapses."
            },
            {
              "name": "wait",
              "type": "number",
              "description": "Optional wait time in milliseconds (ms) after the\n  last signal that must elapse before invoking `callback`"
            }
          ],
          "return": {
            "type": "!Object",
            "desc": "Returns a debouncer object on which exists the\nfollowing methods: `isActive()` returns true if the debouncer is\nactive; `cancel()` cancels the debouncer if it is active;\n`flush()` immediately invokes the debounced callback if the debouncer\nis active."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "async",
          "description": "Runs a callback function asynchronously.\n\nBy default (if no waitTime is specified), async callbacks are run at\nmicrotask timing, which will occur before paint.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "!Function",
              "description": "The callback function to run, bound to `this`."
            },
            {
              "name": "waitTime",
              "type": "number=",
              "description": "Time to wait before calling the\n  `callback`.  If unspecified or 0, the callback will be run at microtask\n  timing (before paint)."
            }
          ],
          "return": {
            "type": "number",
            "desc": "Handle that may be used to cancel the async job."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "cancelAsync",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "handle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "fire",
          "description": "Polymer fire function used to dispatch custom events",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "event name"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "data to be sent in the event"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "optionals options for the event {bubbles:Boolean,cancelable:Boolean,composed:Boolean,node:HTML Element}"
            }
          ],
          "return": {
            "type": "Event",
            "desc": "Custom event created based on the parameters"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 2
            },
            "end": {
              "line": 287,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "processInitialRoute",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 290,
              "column": 2
            },
            "end": {
              "line": 290,
              "column": 26
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "handleRoutesListChange",
          "description": "Processess the routeList for regexp and sort them with scores.\nCalls 'handleRouteChange' if there is a pending route change",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 2
            },
            "end": {
              "line": 317,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newData",
              "type": "Array"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "refresh",
          "description": "Refeshes the routeslist by fetching from the configUrl",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 2
            },
            "end": {
              "line": 333,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_routesFetched",
          "description": "Sets the fetched routes into 'routesList'",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 339,
              "column": 2
            },
            "end": {
              "line": 341,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_routesFetchError",
          "description": "Logs the error while fetching the routes list.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 347,
              "column": 2
            },
            "end": {
              "line": 350,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__resetProperties",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 352,
              "column": 2
            },
            "end": {
              "line": 354,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__match",
          "description": "Checks if the given route object matches the path based on regexp,\nIf the regex matches populates the params object with matches created by regexp.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 364,
              "column": 2
            },
            "end": {
              "line": 390,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path string to match"
            },
            {
              "name": "route",
              "type": "Object",
              "description": "Route object containing the regexp"
            },
            {
              "name": "params",
              "type": "Object",
              "description": "Params object that stores the matched parameters"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "flag if the route matches the path"
          }
        },
        {
          "name": "__setParamsOnElement",
          "description": "Sets the parameters on the element.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 2
            },
            "end": {
              "line": 436,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "Element to set the parameters on."
            },
            {
              "name": "params",
              "type": "Object",
              "description": "Object of params to set on the element"
            },
            {
              "name": "route",
              "type": "Object",
              "description": "Route object with arguments to set on the element"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_joinUrlSegments",
          "description": "Merges pre and post url to return a merged url",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 444,
              "column": 2
            },
            "end": {
              "line": 454,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pre",
              "type": "string"
            },
            {
              "name": "post",
              "type": "string"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Merged Url"
          }
        },
        {
          "name": "importScreen",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 456,
              "column": 2
            },
            "end": {
              "line": 462,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url"
            }
          ]
        },
        {
          "name": "handleRouteChange",
          "description": "On route change matches the current path with the list of routes fetched to find the matching route.\nThen creates and appends the element (if not already created) and selects the element within the target component.\nAdditionally data sent in the query parameter or saved on the state is set on the element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 469,
              "column": 2
            },
            "end": {
              "line": 646,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 145,
          "column": 0
        },
        "end": {
          "line": 647,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OeAppRoute",
      "attributes": [
        {
          "name": "route",
          "description": "Route object obtained from app-location containing\npath,query parameter etc.",
          "sourceRange": {
            "start": {
              "line": 165,
              "column": 6
            },
            "end": {
              "line": 168,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "config-url",
          "description": "Url from which the UIRoutes needs to be fetched ,\ndefaults to api call to UIRoutes model.",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "no-match",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 6
            },
            "end": {
              "line": 184,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "group",
          "description": "'group' query parameter for fetching UIRoutes",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 6
            },
            "end": {
              "line": 192,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "routes-list",
          "description": "List of routes fetched.",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "tail",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 203,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "active-route",
          "description": "Active route",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 6
            },
            "end": {
              "line": 215,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "active-group",
          "description": "Selected group name",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 6
            },
            "end": {
              "line": 225,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "fetch-all-groups",
          "description": "Ignore group property and fetch all Routes",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 6
            },
            "end": {
              "line": 233,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "app-drawer-reset-layout",
          "description": "Fired to notify the resetting of app-drawer .",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oe-route-change",
          "description": "Fired on the element that is displayed after route change.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "route-changed",
          "description": "Fired when the `route` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "tail-changed",
          "description": "Fired when the `tail` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "active-route-changed",
          "description": "Fired when the `activeRoute` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "active-group-changed",
          "description": "Fired when the `activeGroup` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-app-route",
      "mixins": [
        "OECommonMixin"
      ]
    }
  ]
}
